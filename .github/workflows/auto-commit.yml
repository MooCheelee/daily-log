name: Daily GitHub Activity

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 0 点触发
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  daily-activity:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }} # 在 Secrets 里设置 GH_PAT

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup GitHub CLI
        uses: cli/gh-actions@v2

      # 随机延迟 0~3 小时
      - name: Random delay
        run: |
          DELAY=$((RANDOM % 1))
          echo "等待 $DELAY 秒再执行..."
          sleep $DELAY

      - name: Ensure logs directory
        run: mkdir -p logs

      - name: Clean up old logs
        run: |
          find logs -type f -mtime +7 -exec rm -f {} \;
          echo "清理完 7 天前日志"

      - name: Append daily log
        run: |
          LOG_FILE="logs/$(TZ='Asia/Shanghai' date '+%Y-%m-%d').md"
          echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') - 自动提交日志 🌱" >> "$LOG_FILE"

      - name: Commit and push log
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add logs/
          git commit -m "chore: daily log update" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push origin main || echo "push failed (maybe no permission)"

      - name: Randomly create Issue
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            echo "生成每日 Issue"
            gh issue create --title "Daily Issue - $(TZ='Asia/Shanghai' date '+%Y-%m-%d')" \
                            --body "随机生成每日 Issue 🌱" \
                            --repo $GITHUB_REPOSITORY
          fi

      - name: Randomly create PR
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            git checkout -b $BRANCH
            echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') - 自动 PR 日志 🌱" >> logs/$(TZ='Asia/Shanghai' date '+%Y-%m-%d').md
            git add logs/
            git commit -m "chore: daily PR update"
            git push origin $BRANCH
            gh pr create --title "Daily PR - $(TZ='Asia/Shanghai' date '+%Y-%m-%d')" \
                         --body "随机生成每日 PR 🌱" \
                         --base main \
                         --head $BRANCH \
                         --repo $GITHUB_REPOSITORY
          fi

      - name: Auto Review and Merge Personal PR
        run: |
          TARGET_REPO="${GITHUB_REPOSITORY}"
          PR_LIST=$(gh pr list --state open --repo "$TARGET_REPO" --json number -q '.[].number')
          if [ -z "$PR_LIST" ]; then
            echo "没有找到可 review 的 PR"
            exit 0
          fi
          PR_NUM=$(echo "$PR_LIST" | shuf -n1)
          echo "准备对 PR #$PR_NUM 进行自动 Review"
          gh pr review "$PR_NUM" --approve --body "🤖 自动审查通过"
          gh pr merge "$PR_NUM" --squash --delete-branch --repo "$TARGET_REPO" --admin

      - name: Clean up old merged branches
        run: |
          TARGET_REPO="${GITHUB_REPOSITORY}"
          echo "开始清理 7 天前已合并的分支..."
          git fetch --prune
          for branch in $(gh api repos/$TARGET_REPO/branches --paginate --jq '.[].name' | grep '^daily-pr-' || true); do
            if git branch -r --contains origin/$branch | grep -q "origin/main"; then
              LAST_COMMIT=$(gh api repos/$TARGET_REPO/commits/$branch --jq '.commit.committer.date' || echo "")
              if [ -z "$LAST_COMMIT" ]; then
                continue
              fi
              LAST_COMMIT_TS=$(date -d "$LAST_COMMIT" +%s)
              NOW=$(date +%s)
              AGE=$(( (NOW - LAST_COMMIT_TS) / 86400 ))
              if [ $AGE -gt 7 ]; then
                echo "删除已合并并超过 7 天的分支: $branch"
                git push origin --delete $branch || true
              fi
            fi
          done

      - name: Star and fork trending repositories (with log)
        run: |
          LOG_FILE="logs/star_fork.log"
          echo "===== $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') =====" >> "$LOG_FILE"
          echo "获取热门仓库..." >> "$LOG_FILE"

          REPOS=$(gh api 'search/repositories?q=stars:>5000&sort=stars&order=desc&per_page=10' --jq '.items[].full_name' || true)

          if [ -z "$REPOS" ]; then
            echo "未能获取到仓库列表，结束。" >> "$LOG_FILE"
            exit 0
          fi

          COUNT=0
          for repo in $REPOS; do
            RAND=$((RANDOM % 100))
            if [ $RAND -lt 100 ]; then
              echo "⭐ 为仓库加星: $repo"
              gh api --method PUT "user/starred/$repo" || echo "加星失败: $repo"
              echo "$(TZ='Asia/Shanghai' date '+%H:%M:%S') - ⭐ 加星: $repo" >> "$LOG_FILE"

              echo "🍴 Fork 仓库: $repo"
              gh repo fork "$repo" --clone=false --remote=false || echo "Fork 失败: $repo"
              echo "$(TZ='Asia/Shanghai' date '+%H:%M:%S') - 🍴 Fork: $repo" >> "$LOG_FILE"

              COUNT=$((COUNT+1))
              sleep $((RANDOM % 5))
              if [ $COUNT -ge 1 ]; then
                echo "已加星并 fork 1 个仓库，停止。" >> "$LOG_FILE"
                break
              fi
            fi
          done

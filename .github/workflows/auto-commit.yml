name: Daily Random GitHub Activity

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 0 点触发一次
  workflow_dispatch:       # 手动触发
  pull_request:
    types: [opened, synchronize, reopened] # 监控 PR（自动合并用）

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      # 拉取仓库
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      # 随机延迟（模拟每天随机时间执行）
      - name: Wait for random delay
        run: |
          DELAY=$((RANDOM % 5))  # 随机延迟 0-86400 秒（24 小时内）
          echo "Waiting for $DELAY seconds before starting actions..."
          sleep $DELAY

      # 确保 update.md 文件存在
      - name: Ensure update.md exists
        run: |
          if [ ! -f update.md ]; then
            echo "# Daily Commit Log" > update.md
          fi

      # ----- 清理 7 天前的日志 -----
      - name: Clean up old logs
        run: |
          if [ -f update.md ]; then
            # 保留最后 7 行
            tail -n 7 update.md > update.md.tmp && mv update.md.tmp update.md
          fi
          echo "Old logs cleaned, keeping last 7 days."

      # ----- 每日 Commit -----
      - name: Append daily log
        run: |
          echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') - 自动提交日志 🌱" >> update.md

      - name: Commit and push log
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add update.md
          git commit -m "chore: daily log update" || echo "No changes to commit"
          git push

      # ----- 随机创建每日 Issue (30% 概率) -----
      - name: Randomly create daily issue
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            echo "生成每日 Issue"
            gh issue create --title "Daily Issue - $(TZ='Asia/Shanghai' date '+%Y-%m-%d')" \
                            --body "随机生成每日 Issue 🌱" \
                            --repo $GITHUB_REPOSITORY
          else
            echo "今天不生成 Issue"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # ----- 随机创建每日 PR (30% 概率) -----
      - name: Randomly create daily PR
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            git checkout -b $BRANCH
            echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') - 自动 PR 日志 🌱" >> update.md
            git add update.md
            git commit -m "chore: daily PR update"
            git push origin $BRANCH
            gh pr create --title "Daily PR - $(TZ='Asia/Shanghai' date '+%Y-%m-%d')" \
                         --body "随机生成每日 PR 🌱" \
                         --base main \
                         --head $BRANCH \
                         --repo $GITHUB_REPOSITORY
          else
            echo "今天不生成 PR"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # ----- 随机给别人 PR 做 Code Review (30% 概率) -----
      - name: Randomly add code review comment
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            PR_INFO=$(gh pr list --state open --repo $GITHUB_REPOSITORY --json url,author,headRefName -q '.[0]')
            PR_URL=$(echo "$PR_INFO" | jq -r '.url')
            PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.author.login')
            CURRENT_USER=$(gh api user -q '.login')

            if [ "$PR_AUTHOR" != "$CURRENT_USER" ] && [ -n "$PR_URL" ]; then
              echo "Adding review comment to PR: $PR_URL"
              gh pr review $PR_URL --approve --body "Looks good! 👍"
            else
              echo "Skipping review for your own PR or no PR found."
            fi
          else
            echo "今天不进行代码审查"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  auto-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'daily-pr-')

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Fetch PR branch
        run: |
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}

      - name: Merge main into PR branch (ours strategy)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git merge -s recursive -X ours origin/main || true
          git push origin HEAD:${{ github.head_ref }}

      - name: Auto merge PR
        uses: peter-evans/merge-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request: ${{ github.event.pull_request.number }}
          merge-method: squash

      - name: Delete branch after merge
        run: |
          echo "Deleting branch ${{ github.head_ref }} ..."
     

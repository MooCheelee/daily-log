name: Daily GitHub Activity

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 0 点触发一次
  workflow_dispatch:

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      # 随机决定今天执行多少次 (3~6)
      - name: Decide random run count
        id: run_count
        run: |
          COUNT=$(( (RANDOM % 4) + 3 ))  # 3 ~ 6
          echo "今天计划执行 $COUNT 次任务"
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Run multiple times
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          for i in $(seq 1 ${{ steps.run_count.outputs.count }}); do
            echo "------ 第 $i 次运行 ------"

            # 随机延迟 30 分钟 ~ 3 小时
            DELAY=$(( (RANDOM % 9000) + 1800 ))
            echo "等待 $DELAY 秒..."
            sleep $DELAY

            # ==== 时间戳 ====
            LOG_DATE=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
            DAYOFWEEK=$(date +%u) # 1-7 (周一-周日)

            # ==== 必做：提交日志 ====
            echo "------ $LOG_DATE ------" >> update.md
            echo "🌱 自动提交日志" >> update.md

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add update.md
            git commit -m "chore: daily log update" || echo "No changes to commit"
            git push origin main || true

            # ==== 摸鱼判断 ====
            RAND=$((RANDOM % 100))
            # 周末 30%，工作日 10%
            if [ $DAYOFWEEK -ge 6 ]; then
              MOOFISH_THRESHOLD=30
            else
              MOOFISH_THRESHOLD=10
            fi

            if [ $RAND -lt $MOOFISH_THRESHOLD ]; then
              echo "😴 第 $i 次运行选择摸鱼，仅写日志"
              echo "😴 摸鱼，仅写日志" >> update.md
              git add update.md
              git commit -m "chore: log only (moofish)" || true
              git push origin main || true
              continue
            fi

            # ==== 随机选择额外行为 (1~3 个) ====
            ACTIONS=("issue" "pr" "review" "star")
            COUNT=$(( (RANDOM % 3) + 1 ))
            SHUFFLED=$(printf "%s\n" "${ACTIONS[@]}" | shuf | head -n $COUNT)

            for action in $SHUFFLED; do
              case $action in
                issue)
                  ISSUE_TITLE="Daily Issue - $LOG_DATE"
                  gh issue create --title "$ISSUE_TITLE" \
                                  --body "随机生成每日 Issue 🌱" \
                                  --repo $GITHUB_REPOSITORY || true
                  echo "📌 创建 Issue: $ISSUE_TITLE" >> update.md
                  ;;
                pr)
                  BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
                  git checkout -b $BRANCH
                  echo "🌿 自动 PR 日志" >> update.md
                  git add update.md
                  git commit -m "chore: daily PR update"
                  git push origin $BRANCH
                  PR_TITLE="Daily PR - $LOG_DATE"
                  gh pr create --title "$PR_TITLE" \
                               --body "随机生成每日 PR 🌱" \
                               --base main \
                               --head $BRANCH \
                               --repo $GITHUB_REPOSITORY || true
                  git checkout main
                  echo "🌿 创建 PR: $PR_TITLE" >> update.md
                  ;;
                review)
                  TARGET_REPO="${GITHUB_REPOSITORY}"
                  PR_LIST=$(gh pr list --state open --repo "$TARGET_REPO" --json number -q '.[].number')
                  if [ -n "$PR_LIST" ]; then
                    PR_NUM=$(echo "$PR_LIST" | shuf -n1)
                    gh pr review "$PR_NUM" --comment --body "🤖 自动审查并评论：看起来不错！" || true
                    gh pr merge "$PR_NUM" --squash --delete-branch --repo "$TARGET_REPO" --admin || true
                    echo "🔍 审查并合并 PR #$PR_NUM" >> update.md
                  fi
                  ;;
                star)
                  REPOS=$(gh api 'search/repositories?q=stars:>5000&sort=stars&order=desc&per_page=10' --jq '.items[].full_name')
                  COUNT=0
                  for repo in $REPOS; do
                    if [ $((RANDOM % 100)) -lt 40 ]; then
                      gh api --method PUT "user/starred/$repo" || true
                      COUNT=$((COUNT+1))
                      echo "⭐ Star 仓库: $repo" >> update.md
                      if [ $COUNT -ge 2 ]; then break; fi
                    fi
                  done
                  ;;
              esac
            done

            # ==== 清理 15 天前日志 ====
            CUTOFF=$(date -d "15 days ago" '+%Y-%m-%d')
            awk -v cutoff="$CUTOFF" '
              /^------/ { logdate = substr($0, 8, 10) }
              { if (logdate >= cutoff) print $0 }
            ' update.md > update.tmp
            mv update.tmp update.md
            git add update.md
            git commit -m "chore: clean logs older than 15 days" || true
            git push origin main || true

            # ==== 清理 7 天前已合并分支 ====
            echo "🧹 清理 7 天前已合并的分支..."
            for branch in $(gh api repos/$GITHUB_REPOSITORY/branches --paginate --jq '.[].name' | grep '^daily-pr-'); do
              if git branch -r --contains origin/$branch | grep -q "origin/main"; then
                LAST_COMMIT=$(gh api repos/$GITHUB_REPOSITORY/commits/$branch --jq '.commit.committer.date')
                LAST_COMMIT_TS=$(date -d "$LAST_COMMIT" +%s)
                NOW=$(date +%s)
                AGE=$(( (NOW - LAST_COMMIT_TS) / 86400 ))
                if [ $AGE -gt 7 ]; then
                  git push origin --delete $branch || true
                  echo "🗑 删除分支: $branch" >> update.md
                fi
              fi
            done

            echo "✅ 第 $i 次执行完成"
          done
